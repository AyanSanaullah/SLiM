#!/usr/bin/env python3
"""
Script de teste para demonstrar como fazer requests para os modelos treinados
no sistema de agents do ShellHacks.

Este script mostra:
1. Como criar um agent personalizado
2. Como verificar o status do treinamento
3. Como fazer infer√™ncia (obter respostas do modelo)
4. Como gerenciar m√∫ltiplos agents
"""

import requests
import time
import json
from typing import Dict, Any, Optional
import sys

class AgentAPITester:
    def __init__(self, base_url: str = "http://localhost:8080"):
        self.base_url = base_url
        self.session = requests.Session()
    
    def health_check(self) -> bool:
        """Verificar se o servi√ßo est√° funcionando"""
        try:
            response = self.session.get(f"{self.base_url}/health")
            if response.status_code == 200:
                print("‚úÖ Servi√ßo est√° funcionando!")
                return True
            else:
                print(f"‚ùå Servi√ßo com problema: {response.status_code}")
                return False
        except requests.exceptions.ConnectionError:
            print("‚ùå N√£o foi poss√≠vel conectar ao servi√ßo. Certifique-se de que est√° rodando em localhost:8080")
            return False
    
    def create_agent(self, user_id: str, training_data: str, base_model: str = "distilbert-base-uncased") -> Dict[str, Any]:
        """Criar um agent personalizado"""
        print(f"\nü§ñ Criando agent para usu√°rio: {user_id}")
        
        data = {
            "user_id": user_id,
            "training_data": training_data,
            "base_model": base_model
        }
        
        try:
            response = self.session.post(f"{self.base_url}/api/v1/agents", json=data)
            result = response.json()
            
            if response.status_code == 201:
                print(f"‚úÖ Agent criado com sucesso!")
                print(f"   Status: {result.get('status')}")
                print(f"   User ID: {result.get('user_id')}")
            else:
                print(f"‚ùå Erro ao criar agent: {result.get('error')}")
            
            return result
            
        except Exception as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
            return {"error": str(e)}
    
    def get_agent_status(self, user_id: str) -> Dict[str, Any]:
        """Verificar status do agent"""
        try:
            response = self.session.get(f"{self.base_url}/api/v1/agents/{user_id}/status")
            return response.json()
        except Exception as e:
            return {"error": str(e)}
    
    def wait_for_ready(self, user_id: str, max_wait: int = 300) -> bool:
        """Aguardar at√© o modelo estar pronto"""
        print(f"\n‚è≥ Aguardando modelo ficar pronto para {user_id}...")
        
        start_time = time.time()
        while time.time() - start_time < max_wait:
            status = self.get_agent_status(user_id)
            
            if "error" in status:
                print(f"‚ùå Erro ao verificar status: {status['error']}")
                return False
            
            current_status = status.get('status', 'unknown')
            print(f"   Status atual: {current_status}")
            
            if current_status == 'ready':
                print("‚úÖ Modelo pronto!")
                return True
            elif current_status == 'error':
                print(f"‚ùå Erro no treinamento: {status.get('error', 'Erro desconhecido')}")
                return False
            
            time.sleep(5)
        
        print("‚è∞ Timeout aguardando modelo ficar pronto")
        return False
    
    def make_inference(self, user_id: str, prompt: str) -> Optional[str]:
        """Fazer infer√™ncia com o modelo treinado"""
        print(f"\nüí¨ Fazendo pergunta para {user_id}: {prompt}")
        
        data = {"prompt": prompt}
        
        try:
            response = self.session.post(f"{self.base_url}/api/v1/agents/{user_id}/inference", json=data)
            result = response.json()
            
            if response.status_code == 200:
                response_text = result.get('response', 'Sem resposta')
                print(f"ü§ñ Resposta do modelo:")
                print(f"   {response_text}")
                return response_text
            else:
                error_msg = result.get('error', 'Erro desconhecido')
                print(f"‚ùå Erro na infer√™ncia: {error_msg}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
            return None
    
    def list_all_agents(self) -> Dict[str, Any]:
        """Listar todos os agents"""
        try:
            response = self.session.get(f"{self.base_url}/api/v1/agents")
            return response.json()
        except Exception as e:
            return {"error": str(e)}
    
    def delete_agent(self, user_id: str) -> bool:
        """Deletar um agent"""
        try:
            response = self.session.delete(f"{self.base_url}/api/v1/agents/{user_id}")
            if response.status_code == 200:
                print(f"‚úÖ Agent {user_id} deletado com sucesso")
                return True
            else:
                print(f"‚ùå Erro ao deletar agent: {response.json().get('error')}")
                return False
        except Exception as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
            return False

def main():
    """Fun√ß√£o principal para demonstrar o uso da API"""
    print("üöÄ ShellHacks Agent API Tester")
    print("=" * 50)
    
    # Inicializar o tester
    tester = AgentAPITester()
    
    # Verificar se o servi√ßo est√° funcionando
    if not tester.health_check():
        print("\n‚ùå N√£o √© poss√≠vel continuar. Verifique se o servidor est√° rodando:")
        print("   cd agents && python app.py")
        sys.exit(1)
    
    # Exemplo 1: Agent especialista em Python
    print("\n" + "=" * 50)
    print("üìö EXEMPLO 1: Agent Especialista em Python")
    print("=" * 50)
    
    python_expert_data = """
    Sou um especialista em programa√ß√£o Python com mais de 10 anos de experi√™ncia.
    Tenho conhecimento profundo em:
    - Desenvolvimento web com Flask, Django e FastAPI
    - Data Science com pandas, numpy, scikit-learn
    - Machine Learning e Deep Learning
    - An√°lise de dados e visualiza√ß√£o
    - Automa√ß√£o e scripts
    - Boas pr√°ticas de programa√ß√£o e clean code
    - Arquitetura de software e design patterns
    
    Posso ajudar com d√∫vidas t√©cnicas, explica√ß√µes de conceitos,
    revis√£o de c√≥digo e orienta√ß√µes sobre melhores pr√°ticas.
    """
    
    # Criar agent
    agent1 = tester.create_agent("python_expert", python_expert_data)
    
    if "error" not in agent1:
        # Aguardar modelo ficar pronto
        if tester.wait_for_ready("python_expert", max_wait=60):
            # Fazer algumas perguntas
            perguntas_python = [
                "Como implementar autentica√ß√£o JWT em Flask?",
                "Qual a diferen√ßa entre list comprehension e generator expression?",
                "Como otimizar performance de uma query Django com muitos JOINs?"
            ]
            
            for pergunta in perguntas_python:
                tester.make_inference("python_expert", pergunta)
                print("-" * 30)
    
    # Exemplo 2: Agent especialista em Machine Learning
    print("\n" + "=" * 50)
    print("üß† EXEMPLO 2: Agent Especialista em Machine Learning")
    print("=" * 50)
    
    ml_expert_data = """
    Sou um cientista de dados especializado em Machine Learning e Deep Learning.
    Minha expertise inclui:
    - Algoritmos de classifica√ß√£o e regress√£o
    - Redes neurais e deep learning
    - Processamento de linguagem natural (NLP)
    - Vis√£o computacional
    - An√°lise de s√©ries temporais
    - Feature engineering e sele√ß√£o de features
    - Avalia√ß√£o de modelos e m√©tricas
    - TensorFlow, PyTorch, scikit-learn
    - MLOps e deploy de modelos
    
    Posso ajudar com implementa√ß√£o de algoritmos, an√°lise de dados,
    escolha de modelos e otimiza√ß√£o de performance.
    """
    
    # Criar agent
    agent2 = tester.create_agent("ml_expert", ml_expert_data)
    
    if "error" not in agent2:
        # Aguardar modelo ficar pronto
        if tester.wait_for_ready("ml_expert", max_wait=60):
            # Fazer algumas perguntas
            perguntas_ml = [
                "Como escolher entre Random Forest e XGBoost para um problema de classifica√ß√£o?",
                "Quais s√£o as melhores pr√°ticas para lidar com overfitting em redes neurais?",
                "Como implementar early stopping em PyTorch?"
            ]
            
            for pergunta in perguntas_ml:
                tester.make_inference("ml_expert", pergunta)
                print("-" * 30)
    
    # Exemplo 3: Agent especialista em DevOps
    print("\n" + "=" * 50)
    print("‚öôÔ∏è EXEMPLO 3: Agent Especialista em DevOps")
    print("=" * 50)
    
    devops_expert_data = """
    Sou um especialista em DevOps e engenharia de software.
    Tenho experi√™ncia em:
    - CI/CD pipelines
    - Docker e containeriza√ß√£o
    - Kubernetes e orquestra√ß√£o
    - Cloud platforms (AWS, GCP, Azure)
    - Infraestrutura como c√≥digo (Terraform, CloudFormation)
    - Monitoramento e observabilidade
    - Git e versionamento
    - Automa√ß√£o de deploy
    - Microservi√ßos e arquitetura distribu√≠da
    
    Posso ajudar com setup de pipelines, troubleshooting,
    otimiza√ß√£o de infraestrutura e melhores pr√°ticas DevOps.
    """
    
    # Criar agent
    agent3 = tester.create_agent("devops_expert", devops_expert_data)
    
    if "error" not in agent3:
        # Aguardar modelo ficar pronto
        if tester.wait_for_ready("devops_expert", max_wait=60):
            # Fazer algumas perguntas
            perguntas_devops = [
                "Como configurar um pipeline CI/CD para uma aplica√ß√£o Node.js?",
                "Quais s√£o as melhores pr√°ticas para monitoramento de aplica√ß√µes em produ√ß√£o?",
                "Como otimizar custos de infraestrutura na AWS?"
            ]
            
            for pergunta in perguntas_devops:
                tester.make_inference("devops_expert", pergunta)
                print("-" * 30)
    
    # Listar todos os agents
    print("\n" + "=" * 50)
    print("üìã LISTANDO TODOS OS AGENTS")
    print("=" * 50)
    
    all_agents = tester.list_all_agents()
    if "error" not in all_agents:
        users = all_agents.get('users', {})
        total = all_agents.get('total_users', 0)
        
        print(f"Total de agents ativos: {total}")
        for user_id, info in users.items():
            status = info.get('status', 'unknown')
            created_at = info.get('created_at', 'unknown')
            print(f"  - {user_id}: {status} (criado em {created_at})")
    
    # Menu interativo
    print("\n" + "=" * 50)
    print("üéÆ MODO INTERATIVO")
    print("=" * 50)
    print("Digite 'help' para ver comandos dispon√≠veis")
    
    while True:
        try:
            comando = input("\n> ").strip().lower()
            
            if comando == 'help':
                print("""
Comandos dispon√≠veis:
- status <user_id>: Verificar status de um agent
- ask <user_id> <pergunta>: Fazer pergunta a um agent
- list: Listar todos os agents
- delete <user_id>: Deletar um agent
- quit: Sair
                """)
            
            elif comando.startswith('status '):
                user_id = comando.split(' ', 1)[1]
                status = tester.get_agent_status(user_id)
                print(json.dumps(status, indent=2, ensure_ascii=False))
            
            elif comando.startswith('ask '):
                parts = comando.split(' ', 2)
                if len(parts) >= 3:
                    user_id = parts[1]
                    pergunta = parts[2]
                    tester.make_inference(user_id, pergunta)
                else:
                    print("Uso: ask <user_id> <pergunta>")
            
            elif comando == 'list':
                all_agents = tester.list_all_agents()
                if "error" not in all_agents:
                    users = all_agents.get('users', {})
                    for user_id, info in users.items():
                        status = info.get('status', 'unknown')
                        print(f"  - {user_id}: {status}")
            
            elif comando.startswith('delete '):
                user_id = comando.split(' ', 1)[1]
                tester.delete_agent(user_id)
            
            elif comando == 'quit':
                break
            
            else:
                print("Comando n√£o reconhecido. Digite 'help' para ver comandos dispon√≠veis.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Saindo...")
            break
        except Exception as e:
            print(f"Erro: {e}")

if __name__ == "__main__":
    main()
